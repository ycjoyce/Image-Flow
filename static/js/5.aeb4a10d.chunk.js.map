{"version":3,"sources":["hooks/useInView.ts","apis/unsplash.ts","components/ImageRenderer.tsx","hooks/useImageDetail.ts","components/ImageDetail.tsx"],"names":["observer","callbackMap","Map","handleIntersections","entries","forEach","isIntersecting","intersectionRatio","target","cb","get","unobserve","delete","useInView","el","callback","useEffect","current","undefined","IntersectionObserver","threshold","set","observe","e","axios","create","baseURL","headers","Authorization","process","ImageRenderer","props","blur_hash","imageURL","urls","description","thumb","useState","inView","setInView","loaded","setLoaded","ref","useRef","style","width","height","position","className","opacity","hash","background","renderPlaceholder","src","alt","onLoad","memo","useImageDetail","id","history","useHistory","status","data","detail","setDetail","unsplashAPI","then","res","catch","err","response","ImageDetail","alertMsg","useParams","alert","setAlert","timer","setTimeout","push","clearTimeout","tags","alt_description","tags_preview","map","tag","to","title","paddingBottom","renderContent","Mask","LoadingMask"],"mappings":"+GAAA,IAEIA,EAFJ,OAIMC,EAAc,IAAIC,IAElBC,EAAsB,SAACC,GAC3BA,EAAQC,SAAQ,YAAoD,IAAjDC,EAAgD,EAAhDA,eAAgBC,EAAgC,EAAhCA,kBAAmBC,EAAa,EAAbA,OAC9CC,EAAKR,EAAYS,IAAIF,GACtBC,IACDH,GAAkBC,EAAoB,KACxCP,EAASW,UAAUH,GACnBP,EAAYW,OAAOJ,GACnBC,EAAGH,EAAgBC,QAoCVM,IAtBG,SAChBC,EACAC,GAEAC,qBACE,WACE,IACE,IAAiBR,EAAWM,EAApBG,QACFjB,QAhBKkB,IAAblB,IACFA,EAAW,IAAImB,qBAAqBhB,EAAqB,CACvDiB,UAAW,MAGRpB,GAeD,OAHAC,EAAYoB,IAAIb,EAAQO,GACxBf,EAASsB,QAAQd,GAEV,WACLR,EAASW,UAAUH,GACnBP,EAAYW,OAAOJ,IAErB,MAAOe,OAEX,CAACR,EAAUD,M,gCC7Cf,qBAEeU,QAAMC,OAAO,CAC1BC,QAAS,4BACTC,QAAS,CACPC,cAAc,aAAD,OAAeC,mD,0ECI1BC,EAAgB,SAACC,GACrB,IAAQC,EAA0DD,EAA1DC,UAAiBC,EAAyCF,EAA/CG,KAAgBC,EAA+BJ,EAA/BI,YAAnC,EAAkEJ,EAAlBK,aAAhD,SACA,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAMC,iBAAuB,MAcnC,OAJA9B,YAAU6B,GAAK,WACbH,GAAU,MAIV,qBACEG,IAAKA,EACLE,MAAO,CACLC,MAAO,OACPC,OAAQ,OACRC,SAAU,YALd,SAQE,sBAAKC,UAAU,iBAAf,UACE,qBACEA,UAAU,oBACVJ,MAAO,CACLK,QAAST,EAAS,EAAI,GAH1B,SAtBoB,SAACR,GACzB,OAAOA,EACL,cAAC,IAAD,CAAUkB,KAAMlB,EAAWa,MAAM,OAAOC,OAAO,SAE/C,qBAAKF,MAAO,CAAEO,WAAY,OAAQN,MAAO,OAAQC,OAAQ,UAwBpDM,CAAkBpB,KAGpBM,GACC,qBACEe,IAAKpB,EAASG,EAAQ,QAAU,WAChCkB,IAAKnB,EACLa,UAAU,QACVO,OAAQ,kBAAMd,GAAU,YAQrBe,mBAAK1B,I,yFCzBL2B,EAvBQ,SAACC,GACtB,IAAMC,EAAUC,cAChB,EAA4BvB,mBAAiB,CAC3CwB,OAAQ,UACRC,MAAM,IAFR,mBAAOC,EAAP,KAAeC,EAAf,KAkBA,OAbAhD,qBACE,WACEiD,YAAY,WAAD,OAAYP,IACpBQ,MAAK,SAACC,GACLH,EAAU,CAAEH,OAAQ,UAAWC,KAAMK,EAAIL,UAE1CM,OAAM,SAACC,GACNL,EAAU,CAAEH,OAAQQ,EAAIC,SAAUT,OAAQC,MAAM,SAGtD,CAACJ,EAAIC,IAGAI,G,+BC2DMQ,UA9EK,SAACxC,GACnB,MAAgDA,EAAxCyC,gBAAR,MAAmB,8GAAnB,EACMb,EAAUC,cACRF,EAAOe,cAAPf,GACR,EAA0BrB,mBAAiB,IAA3C,mBAAOqC,EAAP,KAAcC,EAAd,KACA,EAAyBlB,EAAeC,GAAhCG,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,KA0DhB,OAfA9C,qBACE,WACE,IAAI4D,EAQJ,MAPe,YAAXf,GAAmC,YAAXA,IAC1Bc,EAASH,GACTI,EAAQC,YAAW,WACjBF,EAAS,IACThB,EAAQmB,KAAK,OACZ,OAEE,kBAAMC,aAAaH,MAE5B,CAACd,EAAMD,EAAQF,EAASa,IAIxB,cAAC,WAAD,UACGV,EACC,cAAC,WAAD,UAnDgB,SAACA,GACrB,IATkBkB,EASV7C,EAA8D2B,EAA9D3B,YAAa8C,EAAiDnB,EAAjDmB,gBAAiBC,EAAgCpB,EAAhCoB,aAAcrC,EAAkBiB,EAAlBjB,MAAOC,EAAWgB,EAAXhB,OAE3D,OACE,uBAAME,UAAU,eAAhB,WACIb,GAAe8C,IACf,sBAAKjC,UAAU,kBAAf,UACGb,GACC,mBAAGa,UAAU,uBAAb,SAAqCb,IAEtC8C,GACC,mBAAGjC,UAAU,sBAAb,SAAoCiC,OAKzCC,GACC,qBAAKlC,UAAU,iBAAf,UAzBYgC,EAyBgCE,EAxB3CF,EAAKG,KAAI,SAAAC,GAAG,OACjB,cAAC,IAAD,CAAsBpC,UAAU,iBAAiBqC,GAAE,cAASD,EAAIE,OAAhE,SACGF,EAAIE,OADIF,EAAIE,aA0Bb,qBACE1C,MAAO,CACLC,MAAO,OACP0C,cAAc,GAAD,OAAKzC,EAASD,EAAQ,IAAtB,KACbE,SAAU,YAJd,SAOE,cAACjB,EAAA,EAAD,eAAmBgC,SAwBV0B,CAAc1B,KACvBY,EACF,cAACe,EAAA,EAAD,UACE,mBAAGzC,UAAU,yCAAb,SAAuD0B,MAGzD,cAACgB,EAAA,EAAD","file":"static/js/5.aeb4a10d.chunk.js","sourcesContent":["import { RefObject, useEffect } from \"react\";\n\nlet observer: IntersectionObserver;\n\nconst callbackMap = new Map();\n\nconst handleIntersections = (entries: IntersectionObserverEntry[]) => {\n  entries.forEach(({ isIntersecting, intersectionRatio, target }) => {\n    const cb = callbackMap.get(target);\n    if (!cb) return;\n    if (isIntersecting || intersectionRatio > 0) {\n      observer.unobserve(target);\n      callbackMap.delete(target);\n      cb(isIntersecting, intersectionRatio);\n    }\n  });\n};\n\nconst getObserver = () => {\n  if (observer === undefined) {\n    observer = new IntersectionObserver(handleIntersections, {\n      threshold: 0.8\n    });\n  }\n  return observer;\n};\n\nconst useInView = (\n  el: RefObject<any>,\n  callback: (isIntersecting?: boolean, intersectionRatio?: number) => void\n) => {\n  useEffect(\n    () => {\n      try {\n        const { current: target } = el;\n        const observer = getObserver();\n        callbackMap.set(target, callback);\n        observer.observe(target);\n\n        return () => {\n          observer.unobserve(target);\n          callbackMap.delete(target);\n        };\n      } catch (e) {}\n    },\n    [callback, el]\n  );\n};\n\nexport default useInView;\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://api.unsplash.com/\",\n  headers: {\n    Authorization: `Client-ID ${process.env.REACT_APP_UNSPLASH_ACCESS_KEY}`\n  }\n});\n","import { useState, useRef, memo } from \"react\";\nimport { Blurhash } from \"react-blurhash\";\nimport { Photo } from \"../models\";\nimport useInView from \"../hooks/useInView\";\n\ninterface Props extends Photo {\n  thumb?: boolean;\n}\n\nconst ImageRenderer = (props: Props) => {\n  const { blur_hash, urls: imageURL, description, thumb = false } = props;\n  const [inView, setInView] = useState(false);\n  const [loaded, setLoaded] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  const renderPlaceholder = (blur_hash: string | null): JSX.Element => {\n    return blur_hash ? (\n      <Blurhash hash={blur_hash} width=\"100%\" height=\"100%\" />\n    ) : (\n      <div style={{ background: \"#eee\", width: \"100%\", height: \"100%\" }} />\n    );\n  };\n\n  useInView(ref, () => {\n    setInView(true);\n  });\n\n  return (\n    <div\n      ref={ref}\n      style={{\n        width: \"100%\",\n        height: \"100%\",\n        position: \"absolute\"\n      }}\n    >\n      <div className=\"image-renderer\">\n        <div\n          className=\"image-placeholder\"\n          style={{\n            opacity: loaded ? 0 : 1\n          }}\n        >\n          {renderPlaceholder(blur_hash)}\n        </div>\n\n        {inView && (\n          <img\n            src={imageURL[thumb ? \"thumb\" : \"regular\"]}\n            alt={description}\n            className=\"image\"\n            onLoad={() => setLoaded(true)}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ImageRenderer);\n","import { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { AxiosError, AxiosResponse } from \"axios\";\nimport { Photo } from \"../models\";\nimport unsplashAPI from \"../apis/unsplash\";\n\ninterface Detail {\n  status: \"success\" | \"pending\" | number;\n  data: Photo | false;\n}\n\nconst useImageDetail = (id: string): Detail => {\n  const history = useHistory();\n  const [detail, setDetail] = useState<Detail>({\n    status: \"pending\",\n    data: false\n  });\n\n  useEffect(\n    () => {\n      unsplashAPI(`/photos/${id}`)\n        .then((res: AxiosResponse) => {\n          setDetail({ status: \"success\", data: res.data });\n        })\n        .catch((err: AxiosError) => {\n          setDetail({ status: err.response!.status, data: false });\n        });\n    },\n    [id, history]\n  );\n\n  return detail;\n};\n\nexport default useImageDetail;\n","import { Fragment, useEffect, useState } from \"react\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport useImageDetail from \"../hooks/useImageDetail\";\nimport { Photo, Tag } from \"../models\";\nimport ImageRenderer from \"./ImageRenderer\";\nimport LoadingMask from \"./LoadingMask\";\nimport Mask from \"./Mask\";\n\ntype Props = {\n  alertMsg?: string;\n};\n\nconst ImageDetail = (props: Props) => {\n  const { alertMsg = \"超過限制請求次數(50次/小時)，將導回首頁\" } = props;\n  const history = useHistory();\n  const { id } = useParams<{ id: string }>();\n  const [alert, setAlert] = useState<string>(\"\");\n  const { status, data } = useImageDetail(id);\n\n  const renderTags = (tags: Tag[]): JSX.Element[] => {\n    return tags.map(tag => (\n      <Link key={tag.title} className=\"image-tag-item\" to={`/?q=${tag.title}`}>\n        {tag.title}\n      </Link>\n    ));\n  };\n\n  const renderContent = (data: Photo): JSX.Element => {\n    const { description, alt_description, tags_preview, width, height } = data;\n\n    return (\n      <main className=\"image-detail\">\n        {(description || alt_description) && (\n          <div className=\"image-desc-list\">\n            {description && (\n              <p className=\"image-desc-item main\">{description}</p>\n            )}\n            {alt_description && (\n              <p className=\"image-desc-item sub\">{alt_description}</p>\n            )}\n          </div>\n        )}\n\n        {tags_preview && (\n          <div className=\"image-tag-list\">{renderTags(tags_preview)}</div>\n        )}\n\n        <div\n          style={{\n            width: \"100%\",\n            paddingBottom: `${height / width * 100}%`,\n            position: \"relative\"\n          }}\n        >\n          <ImageRenderer {...data} />\n        </div>\n      </main>\n    );\n  };\n\n  useEffect(\n    () => {\n      let timer: NodeJS.Timer;\n      if (status !== \"success\" && status !== \"pending\") {\n        setAlert(alertMsg);\n        timer = setTimeout(() => {\n          setAlert(\"\");\n          history.push(\"/\");\n        }, 1500);\n      }\n      return () => clearTimeout(timer);\n    },\n    [data, status, history, alertMsg]\n  );\n\n  return (\n    <Fragment>\n      {data ? (\n        <Fragment>{renderContent(data)}</Fragment>\n      ) : alert ? (\n        <Mask>\n          <p className=\"mask-text text-white letter-spacing-lg\">{alert}</p>\n        </Mask>\n      ) : (\n        <LoadingMask />\n      )}\n    </Fragment>\n  );\n};\n\nexport default ImageDetail;\n"],"sourceRoot":""}